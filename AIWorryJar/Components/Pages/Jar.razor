@rendermode InteractiveServer
@inject ChatGptService ChatGptService

<PageTitle>AIWorryJar</PageTitle>

<p>Tell me about what is worrying you.</p>
<textarea id="jar" name="jar" rows="15" 
    class="form-control form-rounded darkTextArea @textOutClass" placeholder="Let it out, then let it go." 
    @bind=@textareaValue/>

<div class="container">
    <button type="button" class="btn btn-primary btn-lg btn-block mt-1" @onclick="LetItGoClicked">Let it go</button>
</div>

<p class="@visClass">@gptResponse</p>

@code {
    private string textareaValue;
    const string gptErrorDefaultResponse = "Everything will be ok. You got this.";
    private string gptResponse = gptErrorDefaultResponse;
    private string visClass = "hidden";
    private string textOutClass = "";

    private async Task LetItGoClicked()
    {
        // get gpt response
        try{
            gptResponse = ChatGptService.BotResponse();
        
            if(gptResponse == null)
            {
                throw new Exception("Failed to get response from GPT.");
            }
        }
        catch
        {
            gptResponse = gptErrorDefaultResponse;
        }

        // trigger visual changes
        visClass = "visible";
        textOutClass = "textOut";

        // trigger reset of changes
        FadoutGptResponse();
        ResetTextArea();
    }

    public async void ResetTextArea()
    {
        await Task.Delay(1000 * 2);
        textareaValue = "";
        textOutClass = "";
    }

    public async void FadoutGptResponse()
    {
        await Task.Delay(1000 * 5);
        visClass = "hidden";
        StateHasChanged();
    }
}
